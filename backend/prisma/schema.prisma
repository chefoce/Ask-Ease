generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String            @unique
  password           String
  isAdmin            Boolean           @default(false)
  isBlocked          Boolean           @default(false)
  language           String            @default("en")
  theme              String            @default("light")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  templates          Template[]        @relation("TemplateAuthor")
  templateAccesses   TemplateAccess[]  @relation("UserTemplateAccess")
  forms              Form[]
  comments           Comment[]
  likes              Like[]
}

model Template {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  topicId     String            @db.ObjectId
  imageUrl    String?
  tags        String[]
  isPublic    Boolean           @default(true)

  questions   Question[]
  forms       Form[]
  comments    Comment[]
  likes       Like[]
  templateAccesses TemplateAccess[] @relation("TemplateTemplateAccess")

  author      User              @relation("TemplateAuthor", fields: [authorId], references: [id])
  authorId    String            @db.ObjectId

  topic       Topic             @relation(fields: [topicId], references: [id])

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  popularityScore Int           @default(0)

  @@index([title])
  @@index([tags])
  @@index([topicId])
}

model Topic {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String

  templates   Template[]
}

model TemplateAccess {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation("UserTemplateAccess", fields: [userId], references: [id])
  userId      String    @db.ObjectId

  template    Template  @relation("TemplateTemplateAccess", fields: [templateId], references: [id])
  templateId  String    @db.ObjectId

  createdAt   DateTime  @default(now())
}

model Question {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  template    Template   @relation(fields: [templateId], references: [id])
  templateId  String     @db.ObjectId
  title       String
  description String
  type        String     // 'single-line', 'multi-line', 'integer', 'positive-integer', 'checkbox', 'select'
  options     String[]   // Lista de opciones para 'checkbox' y 'select'
  showInTable Boolean    @default(false)
}

model Form {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  template    Template  @relation(fields: [templateId], references: [id])
  templateId  String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  answers     Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  template   Template  @relation(fields: [templateId], references: [id])
  templateId String    @db.ObjectId
  createdAt  DateTime  @default(now())
}

model Like {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  template   Template  @relation(fields: [templateId], references: [id])
  templateId String    @db.ObjectId
}
